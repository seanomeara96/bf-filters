{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["container","maxWidth","margin","Fields","handleChange","Object","keys","filters","map","key","Field","filterName","options","filterValue","onChange","type","id","name","value","htmlFor","App","useState","appliedFilters","setAppliedFilters","className","readOnly","style","resize","boxSizing","backgroundColor","display","padding","border","width","cursor","paddingRight","paddingLeft","onClick","event","target","select","document","execCommand","alert","join","querySelectorAll","forEach","el","checked","filterString","newConfig","includes","filter","push","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"mNAEMA,EAAY,CAAEC,SAAU,QAASC,OAAQ,aAC/C,SAASC,EAAT,GAAmC,IAAjBC,EAAgB,EAAhBA,aAChB,OAAOC,OAAOC,KAAKC,GAASC,KAAI,SAACC,GAAD,OAC9B,cAACC,EAAD,CAAiBC,WAAYF,EAAKL,aAAcA,GAApCK,MAIhB,SAASC,EAAT,GAA8C,IAA7BC,EAA4B,EAA5BA,WAAYP,EAAgB,EAAhBA,aACvBQ,EAAUL,EAAQI,GAAYH,KAAI,SAACK,GAAD,OACpC,gCACE,uBACEC,SAAU,WACRV,EAAaO,EAAYE,IAE3BE,KAAK,WACLC,GAAIH,EACJI,KAAMJ,EACNK,MAAOL,IAET,uBAAOM,QAASN,EAAhB,SAA8BA,MAVtBA,MAaZ,OACE,gCACE,6BAAKF,IACL,8BAAMC,OA8DGQ,MA1Df,WAAgB,IAAD,EAC+BC,mBAAS,IADxC,mBACNC,EADM,KACUC,EADV,KAab,OACE,sBAAKC,UAAU,MAAf,UACE,0BACEC,UAAQ,EACRC,MAAO,CACLC,OAAQ,OACRC,UAAW,aACXC,gBAAiB,QACjBC,QAAS,QACTC,QAAS,MACTC,OAAQ,OACRC,MAAO,OACPC,OAAQ,UACRC,aAAc,OACdC,YAAa,QAEfC,QAAS,SAACC,GACRA,EAAMC,OAAOC,SACbC,SAASC,YAAY,QACrBC,MAAM,WAER5B,KAAK,OACLG,MAAOI,EAAesB,KAAK,OAE7B,qBAAKlB,MAAO1B,EAAZ,SACE,wBACEqC,QAAS,WACP,YAAII,SAASI,iBAAiB,2BAA2BC,SACvD,SAACC,GACKA,EAAGC,UAASD,EAAGC,SAAU,MAGjCzB,EAAkB,KAPtB,qBAaF,qBAAKG,MAAO1B,EAAWwB,UAAU,YAAjC,SACG,cAACrB,EAAD,CAAQC,aAlDf,SAAsBa,EAAMC,GAC1B,IAAI+B,EAAY,WAAOhC,EAAP,YAAeC,EAAf,KACZgC,EAAS,YAAO5B,GACf4B,EAAUC,SAASF,IAItBC,EAAYA,EAAUE,QAAO,SAACL,GAAD,OAAQA,IAAOE,KAC5C1B,EAAkB2B,KAJlBA,EAAUG,KAAKJ,GACf1B,EAAkB2B,aC1BTI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFxB,SAASyB,eAAe,SAM1BZ,K","file":"static/js/main.919f5d15.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport filters from \"./filters.json\";\r\nconst container = { maxWidth: \"800px\", margin: \"1rem 3rem\" };\r\nfunction Fields({ handleChange }) {\r\n  return Object.keys(filters).map((key) => (\r\n    <Field key={key} filterName={key} handleChange={handleChange} />\r\n  ));\r\n}\r\n\r\nfunction Field({ filterName, handleChange }) {\r\n  let options = filters[filterName].map((filterValue) => (\r\n    <div key={filterValue}>\r\n      <input\r\n        onChange={() => {\r\n          handleChange(filterName, filterValue);\r\n        }}\r\n        type=\"checkbox\"\r\n        id={filterValue}\r\n        name={filterValue}\r\n        value={filterValue}\r\n      />\r\n      <label htmlFor={filterValue}>{filterValue}</label>\r\n    </div>\r\n  ));\r\n  return (\r\n    <div>\r\n      <h2>{filterName}</h2>\r\n      <div>{options}</div>\r\n    </div>\r\n  );\r\n}\r\nfunction App() {\r\n  const [appliedFilters, setAppliedFilters] = useState([]);\r\n  function handleChange(name, value) {\r\n    let filterString = `\"${name}=${value}\"`;\r\n    let newConfig = [...appliedFilters];\r\n    if (!newConfig.includes(filterString)) {\r\n      newConfig.push(filterString);\r\n      setAppliedFilters(newConfig);\r\n    } else {\r\n      newConfig = newConfig.filter((el) => el !== filterString);\r\n      setAppliedFilters(newConfig);\r\n    }\r\n  }\r\n  return (\r\n    <div className=\"App\">\r\n      <textarea\r\n        readOnly\r\n        style={{\r\n          resize: \"none\",\r\n          boxSizing: \"border-box\",\r\n          backgroundColor: \"coral\",\r\n          display: \"block\",\r\n          padding: \"0px\",\r\n          border: \"none\",\r\n          width: \"100%\",\r\n          cursor: \"pointer\",\r\n          paddingRight: \"3rem\",\r\n          paddingLeft: \"3rem\",\r\n        }}\r\n        onClick={(event) => {\r\n          event.target.select();\r\n          document.execCommand(\"copy\");\r\n          alert(\"copied\");\r\n        }}\r\n        type=\"text\"\r\n        value={appliedFilters.join(\";\")}\r\n      />\r\n      <div style={container}>\r\n        <button\r\n          onClick={() => {\r\n            [...document.querySelectorAll(\"input[type='checkbox']\")].forEach(\r\n              (el) => {\r\n                if (el.checked) el.checked = false;\r\n              }\r\n            );\r\n            setAppliedFilters([]);\r\n          }}\r\n        >\r\n          reset\r\n        </button>\r\n      </div>\r\n      <div style={container} className=\"container\">\r\n        {<Fields handleChange={handleChange} />}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}