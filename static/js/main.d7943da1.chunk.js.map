{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Fields","handleChange","Object","keys","filters","map","key","Field","filterName","options","filterValue","onChange","type","id","name","value","htmlFor","App","useState","appliedFilters","setAppliedFilters","className","readOnly","style","resize","boxSizing","backgroundColor","display","padding","border","width","cursor","paddingRight","paddingLeft","onClick","event","target","select","document","execCommand","alert","join","maxWidth","margin","filterString","newConfig","includes","filter","el","push","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"mNAEA,SAASA,EAAT,GAAmC,IAAjBC,EAAgB,EAAhBA,aAChB,OAAOC,OAAOC,KAAKC,GAASC,KAAI,SAACC,GAAD,OAC9B,cAACC,EAAD,CAAiBC,WAAYF,EAAKL,aAAcA,GAApCK,MAIhB,SAASC,EAAT,GAA8C,IAA7BC,EAA4B,EAA5BA,WAAYP,EAAgB,EAAhBA,aACvBQ,EAAUL,EAAQI,GAAYH,KAAI,SAACK,GAAD,OACpC,gCACE,uBACEC,SAAU,WACRV,EAAaO,EAAYE,IAE3BE,KAAK,WACLC,GAAIH,EACJI,KAAMJ,EACNK,MAAOL,IAET,uBAAOM,QAASN,EAAhB,SAA8BA,MAVtBA,MAaZ,OACE,gCACE,6BAAKF,IACL,8BAAMC,OAiDGQ,MA7Cf,WAAgB,IAAD,EAC+BC,mBAAS,IADxC,mBACNC,EADM,KACUC,EADV,KAab,OACE,sBAAKC,UAAU,MAAf,UACE,0BACEC,UAAQ,EACRC,MAAO,CACLC,OAAQ,OACRC,UAAW,aACXC,gBAAiB,QACjBC,QAAS,QACTC,QAAS,MACTC,OAAQ,OACRC,MAAO,OACPC,OAAQ,UACRC,aAAc,OACdC,YAAa,QAEfC,QAAS,SAACC,GACRA,EAAMC,OAAOC,SACbC,SAASC,YAAY,QACrBC,MAAM,WAER5B,KAAK,OACLG,MAAOI,EAAesB,KAAK,OAG7B,qBAAKlB,MAAO,CAAEmB,SAAU,QAASC,OAAQ,QAAUtB,UAAU,YAA7D,SACG,cAACrB,EAAD,CAAQC,aArCf,SAAsBa,EAAMC,GAC1B,IAAI6B,EAAY,WAAO9B,EAAP,YAAeC,EAAf,KACZ8B,EAAS,YAAO1B,GACf0B,EAAUC,SAASF,IAItBC,EAAYA,EAAUE,QAAO,SAACC,GAAD,OAAQA,IAAOJ,KAC5CxB,EAAkByB,KAJlBA,EAAUI,KAAKL,GACfxB,EAAkByB,aCzBTK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFvB,SAASwB,eAAe,SAM1BZ,K","file":"static/js/main.d7943da1.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport filters from \"./filters.json\";\nfunction Fields({ handleChange }) {\n  return Object.keys(filters).map((key) => (\n    <Field key={key} filterName={key} handleChange={handleChange} />\n  ));\n}\n\nfunction Field({ filterName, handleChange }) {\n  let options = filters[filterName].map((filterValue) => (\n    <div key={filterValue}>\n      <input\n        onChange={() => {\n          handleChange(filterName, filterValue);\n        }}\n        type=\"checkbox\"\n        id={filterValue}\n        name={filterValue}\n        value={filterValue}\n      />\n      <label htmlFor={filterValue}>{filterValue}</label>\n    </div>\n  ));\n  return (\n    <div>\n      <h2>{filterName}</h2>\n      <div>{options}</div>\n    </div>\n  );\n}\nfunction App() {\n  const [appliedFilters, setAppliedFilters] = useState([]);\n  function handleChange(name, value) {\n    let filterString = `\"${name}=${value}\"`;\n    let newConfig = [...appliedFilters];\n    if (!newConfig.includes(filterString)) {\n      newConfig.push(filterString);\n      setAppliedFilters(newConfig);\n    } else {\n      newConfig = newConfig.filter((el) => el !== filterString);\n      setAppliedFilters(newConfig);\n    }\n  }\n  return (\n    <div className=\"App\">\n      <textarea\n        readOnly\n        style={{\n          resize: \"none\",\n          boxSizing: \"border-box\",\n          backgroundColor: \"coral\",\n          display: \"block\",\n          padding: \"0px\",\n          border: \"none\",\n          width: \"100%\",\n          cursor: \"pointer\",\n          paddingRight: \"3rem\",\n          paddingLeft: \"3rem\",\n        }}\n        onClick={(event) => {\n          event.target.select();\n          document.execCommand(\"copy\");\n          alert(\"copied\");\n        }}\n        type=\"text\"\n        value={appliedFilters.join(\";\")}\n      />\n\n      <div style={{ maxWidth: \"800px\", margin: \"3rem\" }} className=\"container\">\n        {<Fields handleChange={handleChange} />}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}